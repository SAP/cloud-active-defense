version: '3'
services:

  myapp:
    container_name: myapp
    build: myapp
    image: myapp
    
  config:
    container_name: configmanager
    build: configmanager
    image: configmanager
    volumes:
    - ./configmanager/data:/data
    - configvolume:/data/blocklist
    ports:
      - "3000:3000"
      
  proxy:
    container_name: proxy
    build: proxy
    image: proxy
    ports:
    - "8000:8000"
    depends_on:
    - myapp
    - clone
    - exhaust
    - fluent
    logging:
      driver: fluentd
  
  fluent:
    container_name: fluentbit
    image: fluent/fluent-bit:3.0
    volumes:
      - ./fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluentbit/parsers.conf:/fluent-bit/etc/custom_parsers.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"

  clone:
    container_name: clone
    build: clone
    image: clone
    depends_on:
      - fluent
    logging:
      driver: fluentd

  exhaust:
    container_name: exhaust
    build: exhaust
    image: exhaust
    depends_on:
      - fluent
    logging:
      driver: fluentd
  
  controlpanel-api:
    container_name: controlpanel-api
    build: controlpanel/api
    image: api
    ports:
      - 8050:8050
    depends_on:
      config:
        condition: service_started
      controlpanel-db:
        condition: service_healthy
      fluent:
        condition: service_started
    volumes:
      - ./controlpanel/api:/app:cached
      - /app/node_modules

  controlpanel:
    container_name: controlpanel
    build: controlpanel/cad
    image: controlpanel
    ports: 
    - 4200:4200
    depends_on:
      - controlpanel-api
    volumes:
      - ./controlpanel/cad:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true

  controlpanel-db:
    image: postgres
    restart: always
    container_name: controlpanel-db
    ports:
    - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cad
    volumes:
    - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  configvolume: {}
  postgres_data:
